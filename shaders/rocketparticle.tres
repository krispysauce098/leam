[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://chnp7vff54xnu"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7sc71"]
input_name = "active"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_qnpgt"]
expanded_output_ports = [0]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3cfhp"]
input_name = "active"

[sub_resource type="VisualShaderNodeParticleConeVelocity" id="VisualShaderNodeParticleConeVelocity_nheu2"]
default_input_values = [0, Vector3(0, 1000, 0), 1, 35.0]

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:3
		bool n_out3p0 = ACTIVE;


		vec3 n_out4p0;
// ConeVelocity:4
		vec3 n_in4p0 = vec3(0.00000, 1000.00000, 0.00000);
		float n_in4p1 = 35.00000;
		{
			float __radians = radians(n_in4p1);
			float __scalar_buff1 = __rand_from_seed_m1_p1(__seed) * __radians;
			float __scalar_buff2 = __rand_from_seed_m1_p1(__seed) * __radians;
			vec3 __vec3_buff1 = n_in4p0;
			__scalar_buff1 += __vec3_buff1.z != 0.0 ? atan(__vec3_buff1.x, __vec3_buff1.z) : sign(__vec3_buff1.x) * (PI / 2.0);
			__scalar_buff2 += __vec3_buff1.z != 0.0 ? atan(__vec3_buff1.y, abs(__vec3_buff1.z)) : (__vec3_buff1.x != 0.0 ? atan(__vec3_buff1.y, abs(__vec3_buff1.x)) : sign(__vec3_buff1.y) * (PI / 2.0));
			__vec3_buff1 = vec3(sin(__scalar_buff1), 0.0, cos(__scalar_buff1));
			vec3 __vec3_buff2 = vec3(0.0, sin(__scalar_buff2), cos(__scalar_buff2));
			__vec3_buff2.z = __vec3_buff2.z / max(0.0001, sqrt(abs(__vec3_buff2.z)));
			n_out4p0 = normalize(vec3(__vec3_buff1.x * __vec3_buff2.z, __vec3_buff2.y, __vec3_buff1.z * __vec3_buff2.z));
		}


// StartOutput:0
		ACTIVE = n_out3p0;
		if(ACTIVE) {
			VELOCITY = n_out4p0;
			if (RESTART_POSITION) {
				TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
				if (RESTART_VELOCITY) {
					VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
				}
				TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
			}
		}


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:2
		bool n_out2p0 = ACTIVE;


// ColorConstant:3
		vec4 n_out3p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


// ProcessOutput:0
		ACTIVE = n_out2p0;
		if(ACTIVE) {
			COLOR.rgb = vec3(n_out3p0.xyz);
		}


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(340, 100)
nodes/start/3/node = SubResource("VisualShaderNodeInput_3cfhp")
nodes/start/3/position = Vector2(60, 100)
nodes/start/4/node = SubResource("VisualShaderNodeParticleConeVelocity_nheu2")
nodes/start/4/position = Vector2(60, 240)
nodes/start/connections = PackedInt32Array(3, 0, 0, 0, 4, 0, 0, 1)
nodes/process/2/node = SubResource("VisualShaderNodeInput_7sc71")
nodes/process/2/position = Vector2(40, 80)
nodes/process/3/node = SubResource("VisualShaderNodeColorConstant_qnpgt")
nodes/process/3/position = Vector2(100, 180)
nodes/process/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 0, 2)
